// generated by info.scce.dime.generator.gui.dart.AngularDartTableTemplate#create
// table in GUI model DetailsPage
// with columns Comments Actions User
import 'dart:js' as js;
import 'package:app/src/core/AbstractRoutes.dart';
import 'package:app/src/services/TableDndService.dart';

import 'dart:async';
import 'dart:convert';
import 'dart:html' as html;

import 'package:angular_router/angular_router.dart';
import 'package:angular/angular.dart';
import 'package:angular/security.dart';
import 'package:angular_forms/angular_forms.dart';

import 'package:app/src/app.dart';

import 'package:app/src/core/dime_process_service.dart';
//Notifications
import 'package:app/src/notification/notification_component.dart';
//Login
import 'package:app/src/login/Login.dart' as login;
import 'package:app/src/core/DIMEComponent.dart' as dime;

//Data
import 'package:app/src/data/Data.dart' as Data;
import 'package:app/src/models/FileReference.dart';
import 'package:app/src/filesupport/fileuploader.dart';
import 'package:app/src/filesupport/fileselect.dart';
import 'package:app/src/models/Selectives.dart';
import 'package:app/src/models/Todos.dart';
//Directives
import 'package:app/src/directives/MaxLength.dart';
import 'package:app/src/directives/DimeCustomeAttributes.dart';

//Import Services
import 'package:intl/intl.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:markdown/markdown.dart' as markdown;
import 'package:app/src/modal/Modal.dart' as modal;
//Panel
import 'package:app/src/panel/Panel.dart' as panel;

//file guard imports
//special element imports
//table component imports
//form component imports
//GUI plug in component imports
//GUI SIB imports
//Embedded process SIB imports


@Component(
  selector: 'table-_fr5MkWAPEe2S6JM4Hx8SJw-detailsPage',
  pipes: const [commonPipes,SecondsPipe],
  encapsulation: ViewEncapsulation.None,
  exports: const [
  	Data.DataCastUtil
  ],
  directives: const [
  coreDirectives,panel.Panel,modal.Modal,DimeCustomeAttributes,formDirectives,FileSelect,routerDirectives,MaxLength,login.Login,SafeInnerHtmlDirective,
  ],
  templateUrl: 'Table_fr5MkWAPEe2S6JM4Hx8SJwDetailsPage.html',
  styles: const [
  ]
)
class Table_fr5MkWAPEe2S6JM4Hx8SJwDetailsPage extends dime.DIMEComponent implements OnInit, AfterViewChecked {
	
	// common declarations
	bool refresh;
	@Input()
	bool ismajorpage = false;
	@Input()
	String currentbranch;
	@Input()
	bool modalDialog = false;
	ChangeDetectorRef cdr;
	@Input()
	String runtimeId;
	@Input()
	String guiId;
	final Router router;
	final DIMEProcessService processService;
	final DomSanitizationService domSanitizationService; 
	// component Default Declaration
	// table refresh flags
	
	
	
	
	
	// branch Edit as info.scce.dime.gui.editor.graphiti.api.CButton@b04ce911 (id: _4twukWAPEe2S6JM4Hx8SJw) in info.scce.dime.gui.editor.graphiti.api.CGUI@b1b1095 (id: _HVzS0GAMEe2S6JM4Hx8SJw)
	@Output('actioneditevent') Stream<Map<String,dynamic>> get evt_actioneditevent => actioneditevent.stream;
	StreamController<Map<String,dynamic>> actioneditevent = new StreamController();
	// branch Delete as info.scce.dime.gui.editor.graphiti.api.CButton@dcba30b8 (id: _6FR7IWAPEe2S6JM4Hx8SJw) in info.scce.dime.gui.editor.graphiti.api.CGUI@b1b1095 (id: _HVzS0GAMEe2S6JM4Hx8SJw)
	@Output('actiondeleteevent') Stream<Map<String,dynamic>> get evt_actiondeleteevent => actiondeleteevent.stream;
	StreamController<Map<String,dynamic>> actiondeleteevent = new StreamController();
	
	@ViewChildren(modal.Modal)
	List<modal.Modal> modals;
	
	@Input()
	DIMEList<Data.Comment>
	 sourceafr5MkWAPEe2S6JM4Hx8SJw;
	
	@Output('source_update') Stream<dynamic> get source_update => _source_update.stream;
	StreamController<dynamic> _source_update = new StreamController();
	
	
	ElementRef elementRef;
	TableDndService dndService;
	html.Element dragHandle;
	
  	//Global Scope
  	//DATA CONTEXT
  	//Issue issue
  		@Input()
  		Data.Issue issue;

	//Extra input variables
	//TABLE SORTING
	String current_fr5MkWAPEe2S6JM4Hx8SJwSortCol = "";
	
	// column User
	// column Comments
	// column Actions
  	
	Table_fr5MkWAPEe2S6JM4Hx8SJwDetailsPage(DIMEProcessService this.processService, TableDndService this.dndService, ElementRef this.elementRef, Router this.router,DomSanitizationService this.domSanitizationService,AbstractRoutes routes) : super(domSanitizationService,processService,routes)
	{
		restartComponent();
	}
	
	
	void restartComponent() {
		
		
			  	
		// branch Edit declaration
		if(this.actioneditevent!=null) {
			  			this.actioneditevent = new StreamController<Map<String,dynamic>>();  				
		}
		// branch Delete declaration
		if(this.actiondeleteevent!=null) {
			  			this.actiondeleteevent = new StreamController<Map<String,dynamic>>();  				
		}
			
		//TABLE SORTING
		current_fr5MkWAPEe2S6JM4Hx8SJwSortCol = "";
		
		// column User
		// column Comments
		// column Actions
	}
									
	void ngOnInit()
	{
		initializeDateFormatting(html.window.navigator.language,null).then((_)=>Intl.defaultLocale = html.window.navigator.language);
		
		
		
		
	}
	
	
	
	
	void ngAfterViewChecked() {
		if(html.querySelector("#table${this.hashCode}")!=null) {
		}
	}
	
	void updateWithoutInputs({bool updateHidden:true}) {
		modals.forEach((m)=>m.close());
		if(updateHidden) {
		}
		updateImageHash();
	}
	
	void updateInputs(
	{Data.Issue pissue
	})
	{
		issue = pissue;
		
		updateWithoutInputs(updateHidden:false);
	}
		@override
		String getRuntimeId() => this.runtimeId;
		
		
		
		
	
		/// callback, if the button Edit is clicked
			void actionediteventa4twukWAPEe2S6JM4Hx8SJwEventTrigger(
				p_RZEiUXmZEe2ix_xiis0jnw
				
				)
		
		{
			Map<String,dynamic> data = new Map();
			data['comment'] = p_RZEiUXmZEe2ix_xiis0jnw;
			this.actioneditevent.add(data);
		}
		/// callback, if the button Delete is clicked
			void actiondeleteeventa6FR7IWAPEe2S6JM4Hx8SJwEventTrigger(
				p_RZEiUXmZEe2ix_xiis0jnw
				
				)
		
		{
			Map<String,dynamic> data = new Map();
			data['comment'] = p_RZEiUXmZEe2ix_xiis0jnw;
			this.actiondeleteevent.add(data);
		}
		
		
		
		
	
		
		
		
		Data.Issue
		 initOnDemandissue()
		{
			if(this.issue==null){
				this.issue = new Data.Issue
				();
			}
			return this.issue;
		}
		void setValueissue(Data.Issue
		 value)
		{
			this.issue = value;
		}
		void issuesetValue(Data.Issue
		 value)
		{
			this.setValueissue(value);
		}
		
	
		
		
		
	// returns the filtered and sorted list of objects
	DIMEList table_fr5MkWAPEe2S6JM4Hx8SJwgetElements(DIMEList source) {
		DIMEList<Data.Comment>
		 table_fr5MkWAPEe2S6JM4Hx8SJwSource = new DIMEList();
		if(source==null) {
			return table_fr5MkWAPEe2S6JM4Hx8SJwSource;
		}
		table_fr5MkWAPEe2S6JM4Hx8SJwSource.addAll(source.where((element) {
		            return (
			true);
		        }));
			    return table_fr5MkWAPEe2S6JM4Hx8SJwSource;
	}
	
	
	/// determines if and in which order the given column is sorted
	String table_fr5MkWAPEe2S6JM4Hx8SJwIsSorted(String colId) {
		String cssClass = "glyphicon glyphicon-chevron-";
	    return "";
	}
	
	
	/// getter for the value of the Comments column
	String tableValue_rkFikGAPEe2S6JM4Hx8SJwProvider(dynamic value) {
		if(value==null)return "";
		String strValue = value?.text?.toString();
		if(strValue == null)return "";
		return strValue;
	}
	/// getter for the value of the Actions column
	String tableValue_sD8uYWAPEe2S6JM4Hx8SJwProvider(dynamic value) {
		if(value==null)return "";
		return "";
	}
	/// getter for the value of the User column
	String tableValue_0XP9EWDaEe22rrMCqBFnwProvider(dynamic value) {
		if(value==null)return "";
		String strValue = value?.commentFirstName?.toString();
		if(strValue == null)return "";
		return strValue;
	}
}

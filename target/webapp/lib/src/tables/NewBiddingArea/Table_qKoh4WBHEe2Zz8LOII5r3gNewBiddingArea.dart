// generated by info.scce.dime.generator.gui.dart.AngularDartTableTemplate#create
// table in GUI model NewBiddingArea
// with columns Preferences
import 'dart:js' as js;
import 'package:app/src/core/AbstractRoutes.dart';
import 'package:app/src/services/TableDndService.dart';

import 'dart:async';
import 'dart:convert';
import 'dart:html' as html;

import 'package:angular_router/angular_router.dart';
import 'package:angular/angular.dart';
import 'package:angular/security.dart';
import 'package:angular_forms/angular_forms.dart';

import 'package:app/src/app.dart';

import 'package:app/src/core/dime_process_service.dart';
//Notifications
import 'package:app/src/notification/notification_component.dart';
//Login
import 'package:app/src/login/Login.dart' as login;
import 'package:app/src/core/DIMEComponent.dart' as dime;

//Data
import 'package:app/src/data/Data.dart' as Data;
import 'package:app/src/models/FileReference.dart';
import 'package:app/src/filesupport/fileuploader.dart';
import 'package:app/src/filesupport/fileselect.dart';
import 'package:app/src/models/Selectives.dart';
import 'package:app/src/models/Todos.dart';
//Directives
import 'package:app/src/directives/MaxLength.dart';
import 'package:app/src/directives/DimeCustomeAttributes.dart';

//Import Services
import 'package:intl/intl.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:markdown/markdown.dart' as markdown;
import 'package:app/src/modal/Modal.dart' as modal;
//Panel
import 'package:app/src/panel/Panel.dart' as panel;

//file guard imports
//special element imports
//table component imports
//form component imports
//GUI plug in component imports
//GUI SIB imports
//Embedded process SIB imports


@Component(
  selector: 'table-_qKoh4WBHEe2Zz8LOII5r3g-newBiddingArea',
  pipes: const [commonPipes,SecondsPipe],
  encapsulation: ViewEncapsulation.None,
  exports: const [
  	Data.DataCastUtil
  ],
  directives: const [
  coreDirectives,panel.Panel,modal.Modal,DimeCustomeAttributes,formDirectives,FileSelect,routerDirectives,MaxLength,login.Login,SafeInnerHtmlDirective,
  ],
  templateUrl: 'Table_qKoh4WBHEe2Zz8LOII5r3gNewBiddingArea.html',
  styles: const [
  ]
)
class Table_qKoh4WBHEe2Zz8LOII5r3gNewBiddingArea extends dime.DIMEComponent implements OnInit, AfterViewChecked {
	
	// common declarations
	bool refresh;
	@Input()
	bool ismajorpage = false;
	@Input()
	String currentbranch;
	@Input()
	bool modalDialog = false;
	ChangeDetectorRef cdr;
	@Input()
	String runtimeId;
	@Input()
	String guiId;
	final Router router;
	final DIMEProcessService processService;
	final DomSanitizationService domSanitizationService; 
	// component Default Declaration
	// table refresh flags
	
	
	
	
	
	
	@ViewChildren(modal.Modal)
	List<modal.Modal> modals;
	
	@Input()
	DIMEList<Data.Feature>
	 sourceaqKoh4WBHEe2Zz8LOII5r3g;
	
	@Output('source_update') Stream<dynamic> get source_update => _source_update.stream;
	StreamController<dynamic> _source_update = new StreamController();
	
	
	ElementRef elementRef;
	TableDndService dndService;
	html.Element dragHandle;
	
  	//Global Scope
  	//DATA CONTEXT
  	//Feature features
  		@Input()
  		DIMEList<Data.Feature> features;
  	//Feature preferences
  		@Input()
  		DIMEList<Data.Feature> preferences;
  	//Feature selectedFeature
  		@Input()
  		DIMEList<Data.Feature> selectedFeature;
  	@Input()
  	String title;
  	//Feature selectedPreferences
  		@Input()
  		DIMEList<Data.Feature> selectedPreferences;
  	@Input()
  	String description;

	//Extra input variables
	//TABLE SORTING
	String current_qKoh4WBHEe2Zz8LOII5r3gSortCol = "";
	
	// column Preferences
  	
	Table_qKoh4WBHEe2Zz8LOII5r3gNewBiddingArea(DIMEProcessService this.processService, TableDndService this.dndService, ElementRef this.elementRef, Router this.router,DomSanitizationService this.domSanitizationService,AbstractRoutes routes) : super(domSanitizationService,processService,routes)
	{
		restartComponent();
	}
	
	
	void restartComponent() {
		
		
			  	
			
		//TABLE SORTING
		current_qKoh4WBHEe2Zz8LOII5r3gSortCol = "";
		
		// column Preferences
	}
									
	void ngOnInit()
	{
		initializeDateFormatting(html.window.navigator.language,null).then((_)=>Intl.defaultLocale = html.window.navigator.language);
		
		
		
		
	}
	
	
	
	
	void ngAfterViewChecked() {
		if(html.querySelector("#table${this.hashCode}")!=null) {
		}
	}
	
	void updateWithoutInputs({bool updateHidden:true}) {
		modals.forEach((m)=>m.close());
		if(updateHidden) {
		}
		updateImageHash();
	}
	
	void updateInputs(
	{DIMEList<Data.Feature>  pfeatures,
	DIMEList<Data.Feature>  ppreferences
	})
	{
		features = pfeatures;
		preferences = ppreferences;
		
		updateWithoutInputs(updateHidden:false);
	}
		@override
		String getRuntimeId() => this.runtimeId;
		
		
		
		
	
		
		
		
		
	
		
		
		
		DIMEList<Data.Feature>
		 initOnDemandfeatures()
		{
			if(this.features==null){
				this.features = new DIMEList<Data.Feature>
				();
			}
			return this.features;
		}
		void setValuefeatures(DIMEList<Data.Feature>
		 value)
		{
			this.features = value;
		}
		void featuressetValue(DIMEList<Data.Feature>
		 value)
		{
			this.setValuefeatures(value);
		}
		void featuresadd(Data.Feature
		 value)
		{
			this.features.add(value);
		}
		DIMEList<Data.Feature>
		 initOnDemandpreferences()
		{
			if(this.preferences==null){
				this.preferences = new DIMEList<Data.Feature>
				();
			}
			return this.preferences;
		}
		void setValuepreferences(DIMEList<Data.Feature>
		 value)
		{
			this.preferences = value;
		}
		void preferencessetValue(DIMEList<Data.Feature>
		 value)
		{
			this.setValuepreferences(value);
		}
		void preferencesadd(Data.Feature
		 value)
		{
			this.preferences.add(value);
		}
		DIMEList<Data.Feature>
		 initOnDemandselectedFeature()
		{
			if(this.selectedFeature==null){
				this.selectedFeature = new DIMEList<Data.Feature>
				();
			}
			return this.selectedFeature;
		}
		void setValueselectedFeature(DIMEList<Data.Feature>
		 value)
		{
			this.selectedFeature = value;
		}
		void selectedFeaturesetValue(DIMEList<Data.Feature>
		 value)
		{
			this.setValueselectedFeature(value);
		}
		void selectedFeatureadd(Data.Feature
		 value)
		{
			this.selectedFeature.add(value);
		}
		String initOnDemandtitle()
		{
			return this.title;
		}
		void setValuetitle(String value)
		{
			this.title = value;
		}
		void titlesetValue(String value)
		{
			this.setValuetitle(value);
		}
		DIMEList<Data.Feature>
		 initOnDemandselectedPreferences()
		{
			if(this.selectedPreferences==null){
				this.selectedPreferences = new DIMEList<Data.Feature>
				();
			}
			return this.selectedPreferences;
		}
		void setValueselectedPreferences(DIMEList<Data.Feature>
		 value)
		{
			this.selectedPreferences = value;
		}
		void selectedPreferencessetValue(DIMEList<Data.Feature>
		 value)
		{
			this.setValueselectedPreferences(value);
		}
		void selectedPreferencesadd(Data.Feature
		 value)
		{
			this.selectedPreferences.add(value);
		}
		String initOnDemanddescription()
		{
			return this.description;
		}
		void setValuedescription(String value)
		{
			this.description = value;
		}
		void descriptionsetValue(String value)
		{
			this.setValuedescription(value);
		}
		
	
		
		
		
	// returns the filtered and sorted list of objects
	DIMEList table_qKoh4WBHEe2Zz8LOII5r3ggetElements(DIMEList source) {
		DIMEList<Data.Feature>
		 table_qKoh4WBHEe2Zz8LOII5r3gSource = new DIMEList();
		if(source==null) {
			return table_qKoh4WBHEe2Zz8LOII5r3gSource;
		}
		table_qKoh4WBHEe2Zz8LOII5r3gSource.addAll(source.where((element) {
		            return (
			true);
		        }));
			    return table_qKoh4WBHEe2Zz8LOII5r3gSource;
	}
	
	
	/// determines if and in which order the given column is sorted
	String table_qKoh4WBHEe2Zz8LOII5r3gIsSorted(String colId) {
		String cssClass = "glyphicon glyphicon-chevron-";
	    return "";
	}
	
	/// the callback if a table row is selected
	void choiceClicked(dynamic value)
	{
		// multiple rows can be selected
		// they are identifiable to their index
		int index = this.initOnDemandselectedPreferences().indexOf(value);
		if (index > -1) {
			this.initOnDemandselectedPreferences().removeAt(index);
		}
		else {
			this.initOnDemandselectedPreferences().add(value);
		}
	}
	
	/// getter for the value of the Preferences column
	String tableValue_qkVbUWBHEe2Zz8LOII5r3gProvider(dynamic value) {
		if(value==null)return "";
		return "";
	}
}

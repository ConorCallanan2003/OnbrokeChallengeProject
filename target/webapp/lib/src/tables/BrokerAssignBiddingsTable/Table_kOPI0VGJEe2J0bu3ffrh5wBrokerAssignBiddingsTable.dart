// generated by info.scce.dime.generator.gui.dart.AngularDartTableTemplate#create
// table in GUI model BrokerAssignBiddingsTable
// with columns Title Actions Assignment
import 'dart:js' as js;
import 'package:app/src/core/AbstractRoutes.dart';
import 'package:app/src/services/TableDndService.dart';

import 'dart:async';
import 'dart:convert';
import 'dart:html' as html;

import 'package:angular_router/angular_router.dart';
import 'package:angular/angular.dart';
import 'package:angular/security.dart';
import 'package:angular_forms/angular_forms.dart';

import 'package:app/src/app.dart';

import 'package:app/src/core/dime_process_service.dart';
//Notifications
import 'package:app/src/notification/notification_component.dart';
//Login
import 'package:app/src/login/Login.dart' as login;
import 'package:app/src/core/DIMEComponent.dart' as dime;

//Data
import 'package:app/src/data/Data.dart' as Data;
import 'package:app/src/models/FileReference.dart';
import 'package:app/src/filesupport/fileuploader.dart';
import 'package:app/src/filesupport/fileselect.dart';
import 'package:app/src/models/Selectives.dart';
import 'package:app/src/models/Todos.dart';
//Directives
import 'package:app/src/directives/MaxLength.dart';
import 'package:app/src/directives/DimeCustomeAttributes.dart';

//Import Services
import 'package:intl/intl.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:markdown/markdown.dart' as markdown;
import 'package:app/src/modal/Modal.dart' as modal;
//Panel
import 'package:app/src/panel/Panel.dart' as panel;

//file guard imports
//special element imports
//table component imports
//form component imports
//GUI plug in component imports
//GUI SIB imports
//Embedded process SIB imports


@Component(
  selector: 'table-_kOPI0VGJEe2J0bu3ffrh5w-brokerAssignBiddingsTable',
  pipes: const [commonPipes,SecondsPipe],
  encapsulation: ViewEncapsulation.None,
  exports: const [
  	Data.DataCastUtil
  ],
  directives: const [
  coreDirectives,panel.Panel,modal.Modal,DimeCustomeAttributes,formDirectives,FileSelect,routerDirectives,MaxLength,login.Login,SafeInnerHtmlDirective,
  ],
  templateUrl: 'Table_kOPI0VGJEe2J0bu3ffrh5wBrokerAssignBiddingsTable.html',
  styles: const [
  ]
)
class Table_kOPI0VGJEe2J0bu3ffrh5wBrokerAssignBiddingsTable extends dime.DIMEComponent implements OnInit, AfterViewChecked {
	
	// common declarations
	bool refresh;
	@Input()
	bool ismajorpage = false;
	@Input()
	String currentbranch;
	@Input()
	bool modalDialog = false;
	ChangeDetectorRef cdr;
	@Input()
	String runtimeId;
	@Input()
	String guiId;
	final Router router;
	final DIMEProcessService processService;
	final DomSanitizationService domSanitizationService; 
	// component Default Declaration
	// table refresh flags
	
	
	
	
	
	// branch Show bidding as info.scce.dime.gui.editor.graphiti.api.CButton@ea4236bf (id: _kOQ-U1GJEe2J0bu3ffrh5w) in info.scce.dime.gui.editor.graphiti.api.CGUI@bc1503fe (id: _dsesAVGJEe2J0bu3ffrh5w)
	@Output('actionshowbiddingevent') Stream<Map<String,dynamic>> get evt_actionshowbiddingevent => actionshowbiddingevent.stream;
	StreamController<Map<String,dynamic>> actionshowbiddingevent = new StreamController();
	// branch Assign as info.scce.dime.gui.editor.graphiti.api.CButton@e8dac0f (id: _kOQ-ZFGJEe2J0bu3ffrh5w) in info.scce.dime.gui.editor.graphiti.api.CGUI@bc1503fe (id: _dsesAVGJEe2J0bu3ffrh5w)
	@Output('actionassignevent') Stream<Map<String,dynamic>> get evt_actionassignevent => actionassignevent.stream;
	StreamController<Map<String,dynamic>> actionassignevent = new StreamController();
	// branch Unassign as info.scce.dime.gui.editor.graphiti.api.CButton@f3718e14 (id: _kORlMVGJEe2J0bu3ffrh5w) in info.scce.dime.gui.editor.graphiti.api.CGUI@bc1503fe (id: _dsesAVGJEe2J0bu3ffrh5w)
	@Output('actionunassignevent') Stream<Map<String,dynamic>> get evt_actionunassignevent => actionunassignevent.stream;
	StreamController<Map<String,dynamic>> actionunassignevent = new StreamController();
	// branch Edit as info.scce.dime.gui.editor.graphiti.api.CButton@811e87ad (id: _PdUCgVuYEe2C-dvY0XUmpA) in info.scce.dime.gui.editor.graphiti.api.CGUI@bc1503fe (id: _dsesAVGJEe2J0bu3ffrh5w)
	@Output('actioneditevent') Stream<Map<String,dynamic>> get evt_actioneditevent => actioneditevent.stream;
	StreamController<Map<String,dynamic>> actioneditevent = new StreamController();
	
	@ViewChildren(modal.Modal)
	List<modal.Modal> modals;
	
	@Input()
	DIMEList<Data.Bidding>
	 sourceakOPI0VGJEe2J0bu3ffrh5w;
	
	@Output('source_update') Stream<dynamic> get source_update => _source_update.stream;
	StreamController<dynamic> _source_update = new StreamController();
	
	
	ElementRef elementRef;
	TableDndService dndService;
	html.Element dragHandle;
	
  	//Global Scope
  	//DATA CONTEXT
  	//Offer offer
  		@Input()
  		Data.Offer offer;

	//Extra input variables
	//TABLE SORTING
	String current_kOPI0VGJEe2J0bu3ffrh5wSortCol = "";
	// table pagination activated
	int table_kOPI0VGJEe2J0bu3ffrh5wCurrentPage = 0;
	int table_kOPI0VGJEe2J0bu3ffrh5w_size = 0;
	
	// column Title
	bool sortColumn_kOQW_1GJEe2J0bu3ffrh5wDirection = false;
	// column Assignment
	bool sortColumn_kORlRFGJEe2J0bu3ffrh5wDirection = false;
	// column Actions
  	
	Table_kOPI0VGJEe2J0bu3ffrh5wBrokerAssignBiddingsTable(DIMEProcessService this.processService, TableDndService this.dndService, ElementRef this.elementRef, Router this.router,DomSanitizationService this.domSanitizationService,AbstractRoutes routes) : super(domSanitizationService,processService,routes)
	{
		restartComponent();
	}
	
	
	void restartComponent() {
		
		
			  	
		// branch Show bidding declaration
		if(this.actionshowbiddingevent!=null) {
			  			this.actionshowbiddingevent = new StreamController<Map<String,dynamic>>();  				
		}
		// branch Assign declaration
		if(this.actionassignevent!=null) {
			  			this.actionassignevent = new StreamController<Map<String,dynamic>>();  				
		}
		// branch Unassign declaration
		if(this.actionunassignevent!=null) {
			  			this.actionunassignevent = new StreamController<Map<String,dynamic>>();  				
		}
		// branch Edit declaration
		if(this.actioneditevent!=null) {
			  			this.actioneditevent = new StreamController<Map<String,dynamic>>();  				
		}
			
		//TABLE SORTING
		current_kOPI0VGJEe2J0bu3ffrh5wSortCol = "";
		// table pagination activated
		table_kOPI0VGJEe2J0bu3ffrh5wCurrentPage = 0;
		table_kOPI0VGJEe2J0bu3ffrh5w_size = 0;
		
		// column Title
		sortColumn_kOQW_1GJEe2J0bu3ffrh5wDirection = false;
		// column Assignment
		sortColumn_kORlRFGJEe2J0bu3ffrh5wDirection = false;
		// column Actions
	}
									
	void ngOnInit()
	{
		initializeDateFormatting(html.window.navigator.language,null).then((_)=>Intl.defaultLocale = html.window.navigator.language);
		
		
		
		
	}
	
	
	
	
	void ngAfterViewChecked() {
		if(html.querySelector("#table${this.hashCode}")!=null) {
		}
	}
	
	void updateWithoutInputs({bool updateHidden:true}) {
		modals.forEach((m)=>m.close());
		if(updateHidden) {
		}
		updateImageHash();
	}
	
	void updateInputs(
	{Data.Offer poffer
	})
	{
		offer = poffer;
		
		updateWithoutInputs(updateHidden:false);
	}
		@override
		String getRuntimeId() => this.runtimeId;
		
		
		
		
	
		/// callback, if the button Show bidding is clicked
			void actionshowbiddingeventakOQ_45_U1GJEe2J0bu3ffrh5wEventTrigger(
				p_pTmgIVGJEe2J0bu3ffrh5w
				
				)
		
		{
			Map<String,dynamic> data = new Map();
			data['bidding'] = p_pTmgIVGJEe2J0bu3ffrh5w;
			this.actionshowbiddingevent.add(data);
		}
		/// callback, if the button Assign is clicked
			void actionassigneventakOQ_45_ZFGJEe2J0bu3ffrh5wEventTrigger(
				p_pTmgIVGJEe2J0bu3ffrh5w
				
				)
		
		{
			Map<String,dynamic> data = new Map();
			data['bidding'] = p_pTmgIVGJEe2J0bu3ffrh5w;
			this.actionassignevent.add(data);
		}
		/// callback, if the button Unassign is clicked
			void actionunassigneventakORlMVGJEe2J0bu3ffrh5wEventTrigger(
				p_pTmgIVGJEe2J0bu3ffrh5w
				
				)
		
		{
			Map<String,dynamic> data = new Map();
			data['bidding'] = p_pTmgIVGJEe2J0bu3ffrh5w;
			this.actionunassignevent.add(data);
		}
		/// callback, if the button Edit is clicked
			void actionediteventaPdUCgVuYEe2C_45_dvY0XUmpAEventTrigger(
				p_pTmgIVGJEe2J0bu3ffrh5w
				
				)
		
		{
			Map<String,dynamic> data = new Map();
			data['bidding'] = p_pTmgIVGJEe2J0bu3ffrh5w;
			this.actioneditevent.add(data);
		}
		
		
		
		
	
		
		
		
		Data.Offer
		 initOnDemandoffer()
		{
			if(this.offer==null){
				this.offer = new Data.Offer
				();
			}
			return this.offer;
		}
		void setValueoffer(Data.Offer
		 value)
		{
			this.offer = value;
		}
		void offersetValue(Data.Offer
		 value)
		{
			this.setValueoffer(value);
		}
		
	
		
		
		
	// returns the filtered and sorted list of objects
	DIMEList table_kOPI0VGJEe2J0bu3ffrh5wgetElements(DIMEList source) {
		DIMEList<Data.Bidding>
		 table_kOPI0VGJEe2J0bu3ffrh5wSource = new DIMEList();
		if(source==null) {
			return table_kOPI0VGJEe2J0bu3ffrh5wSource;
		}
		table_kOPI0VGJEe2J0bu3ffrh5wSource.addAll(source.where((element) {
		            return (
			true);
		        }));
	// column Title is sortable
	if (this.current_kOPI0VGJEe2J0bu3ffrh5wSortCol == "colId_kOQW_1GJEe2J0bu3ffrh5w") {
	    table_kOPI0VGJEe2J0bu3ffrh5wSource.sort(table_kOQW_1GJEe2J0bu3ffrh5wSortFun);
	}
	// column Assignment is sortable
	if (this.current_kOPI0VGJEe2J0bu3ffrh5wSortCol == "colId_kORlRFGJEe2J0bu3ffrh5w") {
	    table_kOPI0VGJEe2J0bu3ffrh5wSource.sort(table_kORlRFGJEe2J0bu3ffrh5wSortFun);
	}
		this.table_kOPI0VGJEe2J0bu3ffrh5w_size = table_kOPI0VGJEe2J0bu3ffrh5wSource.length;
		// pagination with up to 20 entries per page
			    var from = (this.table_kOPI0VGJEe2J0bu3ffrh5wCurrentPage) * 20;
			    var to = from + 20;
			    if (to > table_kOPI0VGJEe2J0bu3ffrh5wSource.length) to = table_kOPI0VGJEe2J0bu3ffrh5wSource.length;
			    if (this.table_kOPI0VGJEe2J0bu3ffrh5wCurrentPage > to) this.table_kOPI0VGJEe2J0bu3ffrh5wCurrentPage = to;
			    if(table_kOPI0VGJEe2J0bu3ffrh5wSource.length>=from && table_kOPI0VGJEe2J0bu3ffrh5wSource.length >= to) {
			    		return table_kOPI0VGJEe2J0bu3ffrh5wSource.subDIMEList(from, to);
			    }
			    return table_kOPI0VGJEe2J0bu3ffrh5wSource;
	}
	
	/// creates the pagination bar entries
	List<int> table_kOPI0VGJEe2J0bu3ffrh5wgetPageCount(int size) {
	    var page_array = new List<int>();
	    int bound = (size / 20).ceil();
	    for (var i = 0; i < bound; i++) {
	        page_array.add(i);
	    }
	    return page_array;
	}
	
	/// callback, if the another page is selected
	///
	/// changes the current page of the table
	void table_kOPI0VGJEe2J0bu3ffrh5wchangePage(int targetPage,dynamic event) {
		int bound = (this.sourceakOPI0VGJEe2J0bu3ffrh5w.length / 20).ceil();
		if (targetPage >= 0 && targetPage < bound) {
	        this.table_kOPI0VGJEe2J0bu3ffrh5wCurrentPage = targetPage;
	    }
	    event.preventDefault();
	    
	}
	
	/// determines if and in which order the given column is sorted
	String table_kOPI0VGJEe2J0bu3ffrh5wIsSorted(String colId) {
		String cssClass = "glyphicon glyphicon-chevron-";
	// column Title is sortable
	if (this.current_kOPI0VGJEe2J0bu3ffrh5wSortCol == colId && colId == "colId_kOQW_1GJEe2J0bu3ffrh5w") {
	    if (this.sortColumn_kOQW_1GJEe2J0bu3ffrh5wDirection) {
	        return cssClass += "down";
	    }
	    return cssClass += "up";
	}
	// column Assignment is sortable
	if (this.current_kOPI0VGJEe2J0bu3ffrh5wSortCol == colId && colId == "colId_kORlRFGJEe2J0bu3ffrh5w") {
	    if (this.sortColumn_kORlRFGJEe2J0bu3ffrh5wDirection) {
	        return cssClass += "down";
	    }
	    return cssClass += "up";
	}
	    return "";
	}
	/// callback, if the sorting has changed for column Title
	void table_kOQW_1GJEe2J0bu3ffrh5wSort(dynamic event) {
		this.sortColumn_kOQW_1GJEe2J0bu3ffrh5wDirection = ! this.sortColumn_kOQW_1GJEe2J0bu3ffrh5wDirection;
		this.current_kOPI0VGJEe2J0bu3ffrh5wSortCol = "colId_kOQW_1GJEe2J0bu3ffrh5w";
		if(event!=null){
			event.preventDefault();
		}
	}
	/// callback, if the sorting has changed for column Title
	int table_kOQW_1GJEe2J0bu3ffrh5wSortFun(n1,n2) {
		dynamic c1 = n1?.offer?.title?.toString();
		dynamic c2 = n2?.offer?.title?.toString();
		if (c1 == null)
			return 1;
		if (c2 == null)
			return -1;
		if(c1
		?.compareTo(c2
		) > 0) {
			return this.sortColumn_kOQW_1GJEe2J0bu3ffrh5wDirection?-1:1;
		}
		if(c1
		?.compareTo(c2
		) < 0) {
			return this.sortColumn_kOQW_1GJEe2J0bu3ffrh5wDirection?1:-1;
		}
		return 0;
	}
	/// callback, if the sorting has changed for column Assignment
	void table_kORlRFGJEe2J0bu3ffrh5wSort(dynamic event) {
		this.sortColumn_kORlRFGJEe2J0bu3ffrh5wDirection = ! this.sortColumn_kORlRFGJEe2J0bu3ffrh5wDirection;
		this.current_kOPI0VGJEe2J0bu3ffrh5wSortCol = "colId_kORlRFGJEe2J0bu3ffrh5w";
		if(event!=null){
			event.preventDefault();
		}
	}
	/// callback, if the sorting has changed for column Assignment
	int table_kORlRFGJEe2J0bu3ffrh5wSortFun(n1,n2) {
		dynamic c1 = n1?.assigned?.toString();
		dynamic c2 = n2?.assigned?.toString();
		if (c1 == null)
			return 1;
		if (c2 == null)
			return -1;
		if(c1
		?.compareTo(c2
		) > 0) {
			return this.sortColumn_kORlRFGJEe2J0bu3ffrh5wDirection?-1:1;
		}
		if(c1
		?.compareTo(c2
		) < 0) {
			return this.sortColumn_kORlRFGJEe2J0bu3ffrh5wDirection?1:-1;
		}
		return 0;
	}
	
	
	/// getter for the value of the Title column
	String tableValue_kOQW_1GJEe2J0bu3ffrh5wProvider(dynamic value) {
		if(value==null)return "";
		String strValue = value?.offer?.title?.toString();
		if(strValue == null)return "";
		return strValue;
	}
	/// getter for the value of the Actions column
	String tableValue_kOQXJlGJEe2J0bu3ffrh5wProvider(dynamic value) {
		if(value==null)return "";
		return "";
	}
	/// getter for the value of the Assignment column
	String tableValue_kORlRFGJEe2J0bu3ffrh5wProvider(dynamic value) {
		if(value==null)return "";
		String strValue = value?.assigned?.toString();
		if(strValue == null)return "";
		return strValue;
	}
}

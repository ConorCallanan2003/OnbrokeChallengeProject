// generated by info.scce.dime.generator.gui.dart.AngularDartTableTemplate#create
// table in GUI model FeatureTemplateTable
// with columns Title Actions
import 'dart:js' as js;
import 'package:app/src/core/AbstractRoutes.dart';
import 'package:app/src/services/TableDndService.dart';

import 'dart:async';
import 'dart:convert';
import 'dart:html' as html;

import 'package:angular_router/angular_router.dart';
import 'package:angular/angular.dart';
import 'package:angular/security.dart';
import 'package:angular_forms/angular_forms.dart';

import 'package:app/src/app.dart';

import 'package:app/src/core/dime_process_service.dart';
//Notifications
import 'package:app/src/notification/notification_component.dart';
//Login
import 'package:app/src/login/Login.dart' as login;
import 'package:app/src/core/DIMEComponent.dart' as dime;

//Data
import 'package:app/src/data/Data.dart' as Data;
import 'package:app/src/models/FileReference.dart';
import 'package:app/src/filesupport/fileuploader.dart';
import 'package:app/src/filesupport/fileselect.dart';
import 'package:app/src/models/Selectives.dart';
import 'package:app/src/models/Todos.dart';
//Directives
import 'package:app/src/directives/MaxLength.dart';
import 'package:app/src/directives/DimeCustomeAttributes.dart';

//Import Services
import 'package:intl/intl.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:markdown/markdown.dart' as markdown;
import 'package:app/src/modal/Modal.dart' as modal;
//Panel
import 'package:app/src/panel/Panel.dart' as panel;

//file guard imports
//special element imports
//table component imports
//form component imports
//GUI plug in component imports
//GUI SIB imports
//Embedded process SIB imports


@Component(
  selector: 'table-_zZO2YVLIEe2djpkPxa2Z3Q-featureTemplateTable',
  pipes: const [commonPipes,SecondsPipe],
  encapsulation: ViewEncapsulation.None,
  exports: const [
  	Data.DataCastUtil
  ],
  directives: const [
  coreDirectives,panel.Panel,modal.Modal,DimeCustomeAttributes,formDirectives,FileSelect,routerDirectives,MaxLength,login.Login,SafeInnerHtmlDirective,
  ],
  templateUrl: 'Table_zZO2YVLIEe2djpkPxa2Z3QFeatureTemplateTable.html',
  styles: const [
  ]
)
class Table_zZO2YVLIEe2djpkPxa2Z3QFeatureTemplateTable extends dime.DIMEComponent implements OnInit, AfterViewChecked {
	
	// common declarations
	bool refresh;
	@Input()
	bool ismajorpage = false;
	@Input()
	String currentbranch;
	@Input()
	bool modalDialog = false;
	ChangeDetectorRef cdr;
	@Input()
	String runtimeId;
	@Input()
	String guiId;
	final Router router;
	final DIMEProcessService processService;
	final DomSanitizationService domSanitizationService; 
	// component Default Declaration
	// table refresh flags
	
	
	
	
	
	// branch Edit feature as info.scce.dime.gui.editor.graphiti.api.CButton@85cb98db (id: _zZTH0VLIEe2djpkPxa2Z3Q) in info.scce.dime.gui.editor.graphiti.api.CGUI@108b2d4f (id: _a-hbAVLIEe2djpkPxa2Z3Q)
	@Output('actioneditfeatureevent') Stream<Map<String,dynamic>> get evt_actioneditfeatureevent => actioneditfeatureevent.stream;
	StreamController<Map<String,dynamic>> actioneditfeatureevent = new StreamController();
	// branch Delete feature as info.scce.dime.gui.editor.graphiti.api.CButton@a0fe8e89 (id: _zZTH4lLIEe2djpkPxa2Z3Q) in info.scce.dime.gui.editor.graphiti.api.CGUI@108b2d4f (id: _a-hbAVLIEe2djpkPxa2Z3Q)
	@Output('actiondeletefeatureevent') Stream<Map<String,dynamic>> get evt_actiondeletefeatureevent => actiondeletefeatureevent.stream;
	StreamController<Map<String,dynamic>> actiondeletefeatureevent = new StreamController();
	// branch Details as info.scce.dime.gui.editor.graphiti.api.CButton@f61a5129 (id: _FHYeQXVnEe2_CvdRyEmMCQ) in info.scce.dime.gui.editor.graphiti.api.CGUI@108b2d4f (id: _a-hbAVLIEe2djpkPxa2Z3Q)
	@Output('actiondetailsevent') Stream<Map<String,dynamic>> get evt_actiondetailsevent => actiondetailsevent.stream;
	StreamController<Map<String,dynamic>> actiondetailsevent = new StreamController();
	
	@ViewChildren(modal.Modal)
	List<modal.Modal> modals;
	
	@Input()
	DIMEList<Data.Feature>
	 sourceazZO2YVLIEe2djpkPxa2Z3Q;
	
	@Output('source_update') Stream<dynamic> get source_update => _source_update.stream;
	StreamController<dynamic> _source_update = new StreamController();
	
	
	ElementRef elementRef;
	TableDndService dndService;
	html.Element dragHandle;
	
  	//Global Scope
  	//DATA CONTEXT
  	//Feature features
  		@Input()
  		DIMEList<Data.Feature> features;

	//Extra input variables
	//TABLE SORTING
	String current_zZO2YVLIEe2djpkPxa2Z3QSortCol = "";
	// table pagination activated
	int table_zZO2YVLIEe2djpkPxa2Z3QCurrentPage = 0;
	int table_zZO2YVLIEe2djpkPxa2Z3Q_size = 0;
	
	// column Title
	bool sortColumn_zZRSrFLIEe2djpkPxa2Z3QDirection = false;
	// column Actions
  	
	Table_zZO2YVLIEe2djpkPxa2Z3QFeatureTemplateTable(DIMEProcessService this.processService, TableDndService this.dndService, ElementRef this.elementRef, Router this.router,DomSanitizationService this.domSanitizationService,AbstractRoutes routes) : super(domSanitizationService,processService,routes)
	{
		restartComponent();
	}
	
	
	void restartComponent() {
		
		
			  	
		// branch Edit feature declaration
		if(this.actioneditfeatureevent!=null) {
			  			this.actioneditfeatureevent = new StreamController<Map<String,dynamic>>();  				
		}
		// branch Delete feature declaration
		if(this.actiondeletefeatureevent!=null) {
			  			this.actiondeletefeatureevent = new StreamController<Map<String,dynamic>>();  				
		}
		// branch Details declaration
		if(this.actiondetailsevent!=null) {
			  			this.actiondetailsevent = new StreamController<Map<String,dynamic>>();  				
		}
			
		//TABLE SORTING
		current_zZO2YVLIEe2djpkPxa2Z3QSortCol = "";
		// table pagination activated
		table_zZO2YVLIEe2djpkPxa2Z3QCurrentPage = 0;
		table_zZO2YVLIEe2djpkPxa2Z3Q_size = 0;
		
		// column Title
		sortColumn_zZRSrFLIEe2djpkPxa2Z3QDirection = false;
		// column Actions
	}
									
	void ngOnInit()
	{
		initializeDateFormatting(html.window.navigator.language,null).then((_)=>Intl.defaultLocale = html.window.navigator.language);
		
		
		
		
	}
	
	
	
	
	void ngAfterViewChecked() {
		if(html.querySelector("#table${this.hashCode}")!=null) {
		}
	}
	
	void updateWithoutInputs({bool updateHidden:true}) {
		modals.forEach((m)=>m.close());
		if(updateHidden) {
		}
		updateImageHash();
	}
	
	void updateInputs(
	{DIMEList<Data.Feature>  pfeatures
	})
	{
		features = pfeatures;
		
		updateWithoutInputs(updateHidden:false);
	}
		@override
		String getRuntimeId() => this.runtimeId;
		
		
		
		
	
		/// callback, if the button Edit feature is clicked
			void actioneditfeatureeventazZTH0VLIEe2djpkPxa2Z3QEventTrigger(
				p_8e0h4VLIEe2djpkPxa2Z3Q
				
				)
		
		{
			Map<String,dynamic> data = new Map();
			data['feature'] = p_8e0h4VLIEe2djpkPxa2Z3Q;
			this.actioneditfeatureevent.add(data);
		}
		/// callback, if the button Delete feature is clicked
			void actiondeletefeatureeventazZTH4lLIEe2djpkPxa2Z3QEventTrigger(
				p_8e0h4VLIEe2djpkPxa2Z3Q
				
				)
		
		{
			Map<String,dynamic> data = new Map();
			data['feature'] = p_8e0h4VLIEe2djpkPxa2Z3Q;
			this.actiondeletefeatureevent.add(data);
		}
		/// callback, if the button Details is clicked
			void actiondetailseventaFHYeQXVnEe2_CvdRyEmMCQEventTrigger(
				p_8e0h4VLIEe2djpkPxa2Z3Q
				
				)
		
		{
			Map<String,dynamic> data = new Map();
			data['feature'] = p_8e0h4VLIEe2djpkPxa2Z3Q;
			this.actiondetailsevent.add(data);
		}
		
		
		
		
	
		
		
		
		DIMEList<Data.Feature>
		 initOnDemandfeatures()
		{
			if(this.features==null){
				this.features = new DIMEList<Data.Feature>
				();
			}
			return this.features;
		}
		void setValuefeatures(DIMEList<Data.Feature>
		 value)
		{
			this.features = value;
		}
		void featuressetValue(DIMEList<Data.Feature>
		 value)
		{
			this.setValuefeatures(value);
		}
		void featuresadd(Data.Feature
		 value)
		{
			this.features.add(value);
		}
		
	
		
		
		
	// returns the filtered and sorted list of objects
	DIMEList table_zZO2YVLIEe2djpkPxa2Z3QgetElements(DIMEList source) {
		DIMEList<Data.Feature>
		 table_zZO2YVLIEe2djpkPxa2Z3QSource = new DIMEList();
		if(source==null) {
			return table_zZO2YVLIEe2djpkPxa2Z3QSource;
		}
		table_zZO2YVLIEe2djpkPxa2Z3QSource.addAll(source.where((element) {
		            return (
			true);
		        }));
	// column Title is sortable
	if (this.current_zZO2YVLIEe2djpkPxa2Z3QSortCol == "colId_zZRSrFLIEe2djpkPxa2Z3Q") {
	    table_zZO2YVLIEe2djpkPxa2Z3QSource.sort(table_zZRSrFLIEe2djpkPxa2Z3QSortFun);
	}
		this.table_zZO2YVLIEe2djpkPxa2Z3Q_size = table_zZO2YVLIEe2djpkPxa2Z3QSource.length;
		// pagination with up to 20 entries per page
			    var from = (this.table_zZO2YVLIEe2djpkPxa2Z3QCurrentPage) * 20;
			    var to = from + 20;
			    if (to > table_zZO2YVLIEe2djpkPxa2Z3QSource.length) to = table_zZO2YVLIEe2djpkPxa2Z3QSource.length;
			    if (this.table_zZO2YVLIEe2djpkPxa2Z3QCurrentPage > to) this.table_zZO2YVLIEe2djpkPxa2Z3QCurrentPage = to;
			    if(table_zZO2YVLIEe2djpkPxa2Z3QSource.length>=from && table_zZO2YVLIEe2djpkPxa2Z3QSource.length >= to) {
			    		return table_zZO2YVLIEe2djpkPxa2Z3QSource.subDIMEList(from, to);
			    }
			    return table_zZO2YVLIEe2djpkPxa2Z3QSource;
	}
	
	/// creates the pagination bar entries
	List<int> table_zZO2YVLIEe2djpkPxa2Z3QgetPageCount(int size) {
	    var page_array = new List<int>();
	    int bound = (size / 20).ceil();
	    for (var i = 0; i < bound; i++) {
	        page_array.add(i);
	    }
	    return page_array;
	}
	
	/// callback, if the another page is selected
	///
	/// changes the current page of the table
	void table_zZO2YVLIEe2djpkPxa2Z3QchangePage(int targetPage,dynamic event) {
		int bound = (this.sourceazZO2YVLIEe2djpkPxa2Z3Q.length / 20).ceil();
		if (targetPage >= 0 && targetPage < bound) {
	        this.table_zZO2YVLIEe2djpkPxa2Z3QCurrentPage = targetPage;
	    }
	    event.preventDefault();
	    
	}
	
	/// determines if and in which order the given column is sorted
	String table_zZO2YVLIEe2djpkPxa2Z3QIsSorted(String colId) {
		String cssClass = "glyphicon glyphicon-chevron-";
	// column Title is sortable
	if (this.current_zZO2YVLIEe2djpkPxa2Z3QSortCol == colId && colId == "colId_zZRSrFLIEe2djpkPxa2Z3Q") {
	    if (this.sortColumn_zZRSrFLIEe2djpkPxa2Z3QDirection) {
	        return cssClass += "down";
	    }
	    return cssClass += "up";
	}
	    return "";
	}
	/// callback, if the sorting has changed for column Title
	void table_zZRSrFLIEe2djpkPxa2Z3QSort(dynamic event) {
		this.sortColumn_zZRSrFLIEe2djpkPxa2Z3QDirection = ! this.sortColumn_zZRSrFLIEe2djpkPxa2Z3QDirection;
		this.current_zZO2YVLIEe2djpkPxa2Z3QSortCol = "colId_zZRSrFLIEe2djpkPxa2Z3Q";
		if(event!=null){
			event.preventDefault();
		}
	}
	/// callback, if the sorting has changed for column Title
	int table_zZRSrFLIEe2djpkPxa2Z3QSortFun(n1,n2) {
		dynamic c1 = n1?.title?.toString();
		dynamic c2 = n2?.title?.toString();
		if (c1 == null)
			return 1;
		if (c2 == null)
			return -1;
		if(c1
		?.compareTo(c2
		) > 0) {
			return this.sortColumn_zZRSrFLIEe2djpkPxa2Z3QDirection?-1:1;
		}
		if(c1
		?.compareTo(c2
		) < 0) {
			return this.sortColumn_zZRSrFLIEe2djpkPxa2Z3QDirection?1:-1;
		}
		return 0;
	}
	
	
	/// getter for the value of the Title column
	String tableValue_zZRSrFLIEe2djpkPxa2Z3QProvider(dynamic value) {
		if(value==null)return "";
		String strValue = value?.title?.toString();
		if(strValue == null)return "";
		return strValue;
	}
	/// getter for the value of the Actions column
	String tableValue_zZR5slLIEe2djpkPxa2Z3QProvider(dynamic value) {
		if(value==null)return "";
		return "";
	}
}

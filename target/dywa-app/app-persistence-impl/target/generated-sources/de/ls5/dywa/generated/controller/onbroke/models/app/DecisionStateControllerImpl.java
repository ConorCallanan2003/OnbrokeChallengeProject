/* generated by info.scce.dime.generator.scheme.ControllerGenerator */
package de.ls5.dywa.generated.controller.onbroke.models.app;

import de.ls5.dywa.generated.entity.onbroke.models.app.DecisionState;
import de.ls5.dywa.generated.entity.onbroke.models.app.DecisionStateEntity;

import java.util.Arrays;
import java.util.stream.Collectors;

@javax.enterprise.context.RequestScoped
public class DecisionStateControllerImpl implements DecisionStateController {
	private static final org.slf4j.Logger LOGGER =  org.slf4j.LoggerFactory.getLogger(DecisionStateController.class);

	@javax.persistence.PersistenceContext
	private javax.persistence.EntityManager entityManager;

	@javax.inject.Inject
	private de.ls5.dywa.generated.util.DomainFileController domainFileController;

@javax.inject.Inject //referenceMap
private de.ls5.dywa.generated.controller.onbroke.models.app.DecisionStateController decisionStateController;

@javax.inject.Inject //referenceMap
private de.ls5.dywa.generated.controller.onbroke.models.app.DecisionController decisionController;

    
    @Override
	public DecisionState read(final java.lang.Long id) {

		DecisionStateEntity result = entityManager.find(DecisionStateEntity.class, id);
		if (result != null) {
			return DecisionState.valueOf(result.getDywaName());
		}
		return DecisionState.forId(id);
	}

    @Override
	public java.util.List<DecisionState> findByProperties(DecisionState searchObject) {
		throw new java.lang.UnsupportedOperationException("Cannot perform this operation on an enumerable object");
	}

	@Override
	public DecisionState findFirstByProperties(DecisionState searchObject) {
		throw new java.lang.UnsupportedOperationException("Cannot perform this operation on an enumerable object");
	}

	@Override
	public java.util.Set<DecisionState> fetch() {
		return java.util.stream.Stream.of(DecisionState.values()).collect(java.util.stream.Collectors.toSet());
	}

	@Override
	public java.util.Set<DecisionState> fetchByName(final java.lang.String name) {
		return java.util.stream.Stream.of(DecisionState.values()).filter(e -> java.util.Objects.equals(e.getDywaName(), name)).collect(java.util.stream.Collectors.toSet());
	}

}

/* generated by info.scce.dime.generator.scheme.ControllerGenerator */
package de.ls5.dywa.generated.controller.onbroke.models.app;

import de.ls5.dywa.generated.entity.onbroke.models.app.Submission;
import de.ls5.dywa.generated.entity.onbroke.models.app.SubmissionAbs;
import de.ls5.dywa.generated.entity.onbroke.models.app.SubmissionSearch;

import java.util.Arrays;
import java.util.stream.Collectors;

@javax.enterprise.context.RequestScoped
public class SubmissionControllerImpl implements SubmissionController {
	private static final org.slf4j.Logger LOGGER =  org.slf4j.LoggerFactory.getLogger(SubmissionController.class);

	@javax.persistence.PersistenceContext
	private javax.persistence.EntityManager entityManager;

	@javax.inject.Inject
	private de.ls5.dywa.generated.util.DomainFileController domainFileController;

@javax.inject.Inject // non ref map
private de.ls5.dywa.generated.controller.onbroke.models.app.OfferController offerController;

@javax.inject.Inject // non ref map
private de.ls5.dywa.generated.controller.onbroke.models.app.BiddingController biddingController;

    
    @Override
	public Submission read(final java.lang.Long id) {

		 Submission result = null;
		 	// delegate read until entity is found;
		result = result==null?offerController.read(id):result;
		result = result==null?biddingController.read(id):result;
		return result;
	}

    @Override
	public java.util.List<Submission> findByProperties(Submission searchObject) {
		if (searchObject instanceof SubmissionSearch) {
			SubmissionSearch casted = (SubmissionSearch) searchObject;

			java.util.List<Submission> list = buildSimpleQuery(casted.queryAttributes(), casted.queryListAttributes(), true).getResultList().stream().map(Submission::casted).collect(Collectors.toList());

			return list;
		} else {
			throw new java.lang.IllegalArgumentException("Search object required.");
		}
	}

	@Override
	public Submission findFirstByProperties(Submission searchObject) {
		if (searchObject instanceof SubmissionSearch) {
			SubmissionSearch casted = (SubmissionSearch) searchObject;
			java.util.List<Submission> results = new java.util.ArrayList<Submission>();
			;
		if(results.isEmpty()){
			results.add(offerController.findFirstByProperties( new de.ls5.dywa.generated.entity.onbroke.models.app.OfferSearch(casted)));
		}
		if(results.isEmpty()){
			results.add(biddingController.findFirstByProperties( new de.ls5.dywa.generated.entity.onbroke.models.app.BiddingSearch(casted)));
		}
			return results.isEmpty() ? null : results.get(0);
		} else throw new java.lang.IllegalArgumentException("Search object required.");
	}

	@Override
	public Submission createSearchObject(java.lang.String name) {
		return new SubmissionSearch(name);
	}

	@Override
	public java.util.Set<Submission> fetchWithSubtypes() {
		java.util.Set<Submission> list = buildSimpleQuery(null,null, true).getResultList().stream().map(Submission::casted).collect(Collectors.toSet());

		return list;
	}

	@Override
	public void delete(Submission entity) {

		// delegate delete

		if(entity instanceof de.ls5.dywa.generated.entity.onbroke.models.app.OfferImpl) {
		       offerController.delete((de.ls5.dywa.generated.entity.onbroke.models.app.OfferImpl) entity);
		} else 

		if(entity instanceof de.ls5.dywa.generated.entity.onbroke.models.app.BiddingImpl) {
		       biddingController.delete((de.ls5.dywa.generated.entity.onbroke.models.app.BiddingImpl) entity);
		}
	}
	
	@Override
	public void deleteWithIncomingReferences(Submission entityToDelete) {

		// delegate delete if entity type is Offer
		if(entityToDelete instanceof de.ls5.dywa.generated.entity.onbroke.models.app.OfferImpl) {
		      offerController.deleteWithIncomingReferences((de.ls5.dywa.generated.entity.onbroke.models.app.OfferImpl) entityToDelete);
		      return;
		} else 
		// delegate delete if entity type is Bidding
		if(entityToDelete instanceof de.ls5.dywa.generated.entity.onbroke.models.app.BiddingImpl) {
		      biddingController.deleteWithIncomingReferences((de.ls5.dywa.generated.entity.onbroke.models.app.BiddingImpl) entityToDelete);
		      return;
		}
		delete(entityToDelete);
	}
	
	private javax.persistence.TypedQuery<SubmissionAbs> buildSimpleQuery(java.util.Map<String, Object> attributeMap, java.util.Map<String, java.util.List> listAttributeMap, boolean withInherited) {
		java.lang.StringBuilder queryStr = new java.lang.StringBuilder("SELECT e FROM SubmissionAbs e WHERE (true="+withInherited+" OR e.inheritance_ = false)");
		if (attributeMap != null) {
			for (java.util.Map.Entry<String, Object> entry : attributeMap.entrySet()) {
				queryStr.append(" AND e." + entry.getKey() + " = :" + entry.getKey().replaceAll("\\W", ""));
			}
		}
		if (listAttributeMap != null) {
			for (java.util.Map.Entry<String, java.util.List> entry : listAttributeMap.entrySet()) {
				if (entry.getValue() == null || entry.getValue().isEmpty()) {
					queryStr.append(" AND e." + entry.getKey() + " IS EMPTY");
				} else {
					String prefix = entry.getKey().replaceAll("\\W", "");
					for (int i = 0, s = entry.getValue().size(); i < s; i++) {
						queryStr.append(" AND :" + prefix + i + " MEMBER OF e." + entry.getKey());
					}
				}
			}
		}
		queryStr.append(" ORDER BY id_ DESC");
		javax.persistence.TypedQuery<SubmissionAbs> query = entityManager.createQuery(queryStr.toString(), SubmissionAbs.class);
		if (attributeMap != null) {
			for (java.util.Map.Entry<String, Object> entry : attributeMap.entrySet()) {
				query.setParameter(entry.getKey().replaceAll("\\W", ""), entry.getValue());
			}
		}
		if (listAttributeMap != null) {
			for (java.util.Map.Entry<String, java.util.List> entry : listAttributeMap.entrySet()) {
				if (entry.getValue() != null && !entry.getValue().isEmpty()) {
					String prefix = entry.getKey().replaceAll("\\W", "");
					for (int i = 0, s = entry.getValue().size(); i < s; i++) {
						query.setParameter(prefix + i, entry.getValue().get(i));
					}
				}
			}
		}
		query.setHint(org.hibernate.jpa.QueryHints.HINT_CACHEABLE,true);
		return query;
	}
}

/* generated by info.scce.dime.generator.scheme.ControllerGenerator */
package de.ls5.dywa.generated.controller.onbroke.models.app;

import de.ls5.dywa.generated.entity.onbroke.models.app.Decision;
import de.ls5.dywa.generated.entity.onbroke.models.app.DecisionImpl;
import de.ls5.dywa.generated.entity.onbroke.models.app.DecisionSearch;

import java.util.Arrays;
import java.util.stream.Collectors;

@javax.enterprise.context.RequestScoped
public class DecisionControllerImpl implements DecisionController {
	private static final org.slf4j.Logger LOGGER =  org.slf4j.LoggerFactory.getLogger(DecisionController.class);

	@javax.persistence.PersistenceContext
	private javax.persistence.EntityManager entityManager;

	@javax.inject.Inject
	private de.ls5.dywa.generated.util.DomainFileController domainFileController;

@javax.inject.Inject //referenceMap
private de.ls5.dywa.generated.controller.onbroke.models.app.OfferController offerController;

@javax.inject.Inject //referenceMap
private de.ls5.dywa.generated.controller.onbroke.models.app.BiddingController biddingController;

@javax.inject.Inject //referenceMap
private de.ls5.dywa.generated.controller.onbroke.models.app.SubmissionController submissionController;

    
    @Override
	public Decision read(final java.lang.Long id) {

		 Decision result = entityManager.find(DecisionImpl.class, id);
		 	// delegate read until entity is found;
		return result;
	}

    @Override
	public java.util.List<Decision> findByProperties(Decision searchObject) {
		if (searchObject instanceof DecisionSearch) {
			DecisionSearch casted = (DecisionSearch) searchObject;

			java.util.List<Decision> list = buildSimpleQuery(casted.queryAttributes(), casted.queryListAttributes(), true).getResultList().stream().map(Decision::casted).collect(Collectors.toList());

			return list;
		} else {
			throw new java.lang.IllegalArgumentException("Search object required.");
		}
	}

	@Override
	public Decision findFirstByProperties(Decision searchObject) {
		if (searchObject instanceof DecisionSearch) {
			DecisionSearch casted = (DecisionSearch) searchObject;
			java.util.List<Decision> results = new java.util.ArrayList<Decision>();
			results.addAll(buildSimpleQuery(casted.queryAttributes(), casted.queryListAttributes(),false).setMaxResults(1).getResultList());
			return results.isEmpty() ? null : results.get(0);
		} else throw new java.lang.IllegalArgumentException("Search object required.");
	}

	@Override
	public java.util.Set<Decision> fetch() {
		return new java.util.HashSet<Decision>(buildSimpleQuery(null, null,false).getResultList());
	}

	@Override
	public java.util.Set<Decision> fetchByName(final java.lang.String name) {
		java.util.Map<String, Object> map = new java.util.HashMap<>();
		map.put("name_", name);
		java.util.HashSet<Decision> result = new java.util.HashSet<>(buildSimpleQuery(map, null,false).getResultList());
		return result;
	}

		@Override
		public Decision create(java.lang.String name) {
			DecisionImpl entity = new DecisionImpl();
			entity.setDywaName(name);
			entityManager.persist(entity);
			return entity;
		}

		@Override
		public Decision createTransient(java.lang.String name) {
			DecisionImpl entity = new DecisionImpl();
			entity.setDywaName(name);
			return entity;
		}

	@Override
	public Decision createSearchObject(java.lang.String name) {
		return new DecisionSearch(name);
	}

	@Override
	public java.util.Set<Decision> fetchWithSubtypes() {
		java.util.Set<Decision> list = buildSimpleQuery(null,null, true).getResultList().stream().map(Decision::casted).collect(Collectors.toSet());

		return list;
	}

	@Override
	public void delete(Decision entity) {

		if (entity instanceof DecisionImpl) {
			DecisionImpl impl = (DecisionImpl) entity;
			entityManager.remove(impl);
		}
		// delegate delete
	}
	
	@Override
	public void deleteWithIncomingReferences(Decision entityToDelete) {

		
		// Delete references from type Bidding
			de.ls5.dywa.generated.entity.onbroke.models.app.Bidding searchBidding;
			searchBidding = new de.ls5.dywa.generated.entity.onbroke.models.app.BiddingSearch();	
				searchBidding.setdecision(entityToDelete);
			for (de.ls5.dywa.generated.entity.onbroke.models.app.Bidding queryResult : this.biddingController.findByProperties(searchBidding)) {
				queryResult.setdecision(null);
			}
		
		// Delete references from type Offer
			de.ls5.dywa.generated.entity.onbroke.models.app.Offer searchOffer;
			searchOffer = new de.ls5.dywa.generated.entity.onbroke.models.app.OfferSearch();	
				searchOffer.setdecision(entityToDelete);
			for (de.ls5.dywa.generated.entity.onbroke.models.app.Offer queryResult : this.offerController.findByProperties(searchOffer)) {
				queryResult.setdecision(null);
			}
		
		// Delete references from type Submission
			de.ls5.dywa.generated.entity.onbroke.models.app.Submission searchSubmission;
			searchSubmission = new de.ls5.dywa.generated.entity.onbroke.models.app.SubmissionSearch();	
				searchSubmission.setdecision(entityToDelete);
			for (de.ls5.dywa.generated.entity.onbroke.models.app.Submission queryResult : this.submissionController.findByProperties(searchSubmission)) {
				queryResult.setdecision(null);
			}
		delete(entityToDelete);
	}
	
	private javax.persistence.TypedQuery<DecisionImpl> buildSimpleQuery(java.util.Map<String, Object> attributeMap, java.util.Map<String, java.util.List> listAttributeMap, boolean withInherited) {
		java.lang.StringBuilder queryStr = new java.lang.StringBuilder("SELECT e FROM DecisionImpl e WHERE (true="+withInherited+" OR e.inheritance_ = false)");
		if (attributeMap != null) {
			for (java.util.Map.Entry<String, Object> entry : attributeMap.entrySet()) {
				queryStr.append(" AND e." + entry.getKey() + " = :" + entry.getKey().replaceAll("\\W", ""));
			}
		}
		if (listAttributeMap != null) {
			for (java.util.Map.Entry<String, java.util.List> entry : listAttributeMap.entrySet()) {
				if (entry.getValue() == null || entry.getValue().isEmpty()) {
					queryStr.append(" AND e." + entry.getKey() + " IS EMPTY");
				} else {
					String prefix = entry.getKey().replaceAll("\\W", "");
					for (int i = 0, s = entry.getValue().size(); i < s; i++) {
						queryStr.append(" AND :" + prefix + i + " MEMBER OF e." + entry.getKey());
					}
				}
			}
		}
		queryStr.append(" ORDER BY id_ DESC");
		javax.persistence.TypedQuery<DecisionImpl> query = entityManager.createQuery(queryStr.toString(), DecisionImpl.class);
		if (attributeMap != null) {
			for (java.util.Map.Entry<String, Object> entry : attributeMap.entrySet()) {
				query.setParameter(entry.getKey().replaceAll("\\W", ""), entry.getValue());
			}
		}
		if (listAttributeMap != null) {
			for (java.util.Map.Entry<String, java.util.List> entry : listAttributeMap.entrySet()) {
				if (entry.getValue() != null && !entry.getValue().isEmpty()) {
					String prefix = entry.getKey().replaceAll("\\W", "");
					for (int i = 0, s = entry.getValue().size(); i < s; i++) {
						query.setParameter(prefix + i, entry.getValue().get(i));
					}
				}
			}
		}
		query.setHint(org.hibernate.jpa.QueryHints.HINT_CACHEABLE,true);
		return query;
	}
}
